name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'feature/*'
      - 'claude/**'
      - 'claude/*'
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '18'

jobs:
  quality-checks:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: frogbytes_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Linting (strict - no warnings allowed)
        run: npm run lint

      - name: Code formatting check
        run: npm run format:check

      - name: Security audit
        run: npm run security-audit

      - name: Check for circular dependencies
        run: npm run check-deps

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      # Temporarily disable unit tests until they are properly implemented
      # - name: Run unit tests with coverage
      #   run: npm run test:unit
      #   env:
      #     CI: true

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage/lcov.info
      #     fail_ci_if_error: true

  # Temporarily disable E2E tests until they are properly implemented
  # e2e-tests:
  #   name: End-to-End Tests
  #   runs-on: ubuntu-latest
  #   needs: quality-checks

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps

  #     - name: Run E2E tests
  #       run: npm run test:e2e
  #       env:
  #         CI: true

  #     - name: Upload Playwright report
  #       uses: actions/upload-artifact@v3
  #       if: failure()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Temporarily disable Lighthouse CI until configuration is set up
  # lighthouse:
  #   name: Lighthouse CI
  #   runs-on: ubuntu-latest
  #   needs: quality-checks

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build application
  #       run: npm run build
  #       env:
  #         NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  #         NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         configPath: './lighthouserc.json'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
