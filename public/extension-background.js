/**
 * FrogBytes Cookie Helper - Background Service Worker
 * Handles cookie extraction requests
 */

// Listen for cookie requests
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.type === 'GET_COOKIES') {
    getCookiesForUrl(request.url)
      .then(cookies => {
        sendResponse({ success: true, cookies })
      })
      .catch(error => {
        console.error('Error getting cookies:', error)
        sendResponse({ success: false, error: error.message })
      })
    return true // Keep channel open for async response
  }
})

/**
 * Extract cookies for a given URL in Netscape format
 */
async function getCookiesForUrl(url) {
  try {
    const urlObj = new URL(url)
    const domain = urlObj.hostname

    // Get all cookies for this domain
    const cookies = await chrome.cookies.getAll({ domain })

    // Convert to Netscape format
    const netscapeCookies = cookies.map(cookie => {
      const httpOnly = cookie.httpOnly ? 'TRUE' : 'FALSE'
      const secure = cookie.secure ? 'TRUE' : 'FALSE'
      const expirationDate =
        cookie.expirationDate || Date.now() / 1000 + 31536000 // 1 year default

      // Netscape format: domain, flag, path, secure, expiration, name, value
      return [
        cookie.domain.startsWith('.') ? cookie.domain : `.${cookie.domain}`,
        httpOnly,
        cookie.path,
        secure,
        Math.floor(expirationDate),
        cookie.name,
        cookie.value
      ].join('\t')
    })

    // Add Netscape header
    const netscapeFormat = [
      '# Netscape HTTP Cookie File',
      '# This file was generated by FrogBytes Cookie Helper',
      '# Edit at your own risk.',
      '',
      ...netscapeCookies
    ].join('\n')

    return netscapeFormat
  } catch (error) {
    console.error('Error extracting cookies:', error)
    throw error
  }
}
